{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using scales\n",
    "Instead of the (default) linear scales, ipyvolume also support bqlot's scales, for instance, the logaritmic scales."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-30T14:12:39.948167Z",
     "start_time": "2020-03-30T14:12:38.877709Z"
    }
   },
   "outputs": [],
   "source": [
    "import ipyvolume as ipv\n",
    "import bqplot.scales\n",
    "import numpy as np\n",
    "import ipywidgets as widgets\n",
    "N = 500\n",
    "x, y, z = np.random.normal(0, 1, (3, N))\n",
    "x = 10**x\n",
    "r = np.sqrt(np.log10(x)**2 + y**2 + z**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-30T14:12:39.967668Z",
     "start_time": "2020-03-30T14:12:39.950213Z"
    }
   },
   "outputs": [],
   "source": [
    "scales = {\n",
    "    'x': bqplot.scales.LogScale(min=10**-3, max=10**3),\n",
    "    'y': bqplot.scales.LinearScale(min=-3, max=3),\n",
    "    'z': bqplot.scales.LinearScale(min=-3, max=3),\n",
    "}\n",
    "color_scale = bqplot.scales.ColorScale(min=0, max=3, colors=[\"#f00\", \"#0f0\", \"#00f\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-30T14:14:28.413170Z",
     "start_time": "2020-03-30T14:14:28.362153Z"
    }
   },
   "outputs": [],
   "source": [
    "fig = ipv.figure(scales=scales)\n",
    "scatter = ipv.scatter(x, y, z, color=r, color_scale=color_scale)\n",
    "ipv.view(150, 30, distance=2.5)\n",
    "ipv.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the x-axis is logarithmically spaced and labeled.\n",
    "\n",
    "We also use the bqplot color scale, and instead of setting a list of colors, we can also set a famour color scheme:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-30T14:12:40.051898Z",
     "start_time": "2020-03-30T14:12:40.047156Z"
    }
   },
   "outputs": [],
   "source": [
    "scatter.color_scale.colors = []\n",
    "scatter.color_scale.scheme = 'viridis'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Linking a widget to the scale, allows us to easily change its properties"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-30T14:12:40.073492Z",
     "start_time": "2020-03-30T14:12:40.056545Z"
    }
   },
   "outputs": [],
   "source": [
    "color_max_slider = widgets.FloatSlider(min=1, max=5, description='Color max')\n",
    "widgets.jslink((color_scale, 'max'), (color_max_slider, 'value'))\n",
    "color_max_slider"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-30T14:12:40.092591Z",
     "start_time": "2020-03-30T14:12:40.076710Z"
    }
   },
   "outputs": [],
   "source": [
    "z_max_slider = widgets.FloatSlider(min=1, max=10, description='Z max')\n",
    "widgets.jslink((fig.scales['z'], 'max'), (z_max_slider, 'value'))\n",
    "z_max_slider"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using the same scales in bqplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-30T14:12:40.181300Z",
     "start_time": "2020-03-30T14:12:40.095589Z"
    }
   },
   "outputs": [],
   "source": [
    "import bqplot.pyplot as plt\n",
    "fig2d = plt.figure(layout={'width': '500px'})\n",
    "scatter2d = plt.scatter(x=(x), y=y, color=scatter.color, scales={\n",
    "    \"x\": fig.scales[\"x\"],\n",
    "    \"y\": fig.scales[\"y\"],\n",
    "    \"color\": scatter.color_scale\n",
    "})\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-30T14:02:52.134689Z",
     "start_time": "2020-03-30T14:02:52.122516Z"
    }
   },
   "source": [
    "Try zooming/panning in both bqplot and ipyvolume! For ipyvolume, keep the option key pressed, while using scroll or drag. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-30T14:14:37.293996Z",
     "start_time": "2020-03-30T14:14:37.237055Z"
    }
   },
   "outputs": [],
   "source": [
    "# Putting the 2 figures next to eachother.\n",
    "widgets.VBox([fig, fig2d])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[screenshot](screenshot/scales.png)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
